package finalproject.tests.player;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.FixMethodOrder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TestRule;
import org.junit.runners.MethodSorters;

import cse131.ArgsProcessor;
import finalproject.HumanPlayer;
import finalproject.Ship;
import lab5.tests.utils.UnitTestUtils;

/**
 * @author Dennis Cosgrove (http://www.cse.wustl.edu/~cosgroved/)
 * 
 *         {@link HumanPlayer#isValidShipToAdd(Ship)}
 */
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class IsValidShipToAddIsOverlappingPreliminaryTest {
	@Rule
	public TestRule timeout = UnitTestUtils.createTimeoutRule();

	@Test
	public void testADifferentRows() {
		Ship a = new Ship(2, 3, 5, true);
		Ship b = new Ship(2, 4, 5, true);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ..........
		// 3 ..aaaaa...
		// 4 ..bbbbb...
		// 5 ..........
		// 6 ..........
		// 7 ..........
		// 8 ..........
		// 9 ..........

		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertTrue(player.isValidShipToAdd(b));
		assertTrue(player.addShip(b));
	}

	@Test
	public void testBDifferentColumns() {
		Ship a = new Ship(3, 2, 5, false);
		Ship b = new Ship(4, 2, 5, false);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ...ab.....
		// 3 ...ab.....
		// 4 ...ab.....
		// 5 ...ab.....
		// 6 ...ab.....
		// 7 ..........
		// 8 ..........
		// 9 ..........

		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertTrue(player.isValidShipToAdd(b));
		assertTrue(player.addShip(b));
	}
	@Test
	public void testCOverlapSameRow() {
		Ship a = new Ship(2, 3, 5, true);
		Ship b = new Ship(4, 3, 5, true);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ..........
		// 3 ..aa***bb.
		// 4 ..........
		// 5 ..........
		// 6 ..........
		// 7 ..........
		// 8 ..........
		// 9 ..........
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertFalse(player.isValidShipToAdd(b));
	}

	@Test
	public void testDOverlapSameColumn() {
		Ship a = new Ship(3, 2, 5, false);
		Ship b = new Ship(3, 4, 5, false);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ...a......
		// 3 ...a......
		// 4 ...*......
		// 5 ...*......
		// 6 ...*......
		// 7 ...b......
		// 8 ...b......
		// 9 ..........
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertFalse(player.isValidShipToAdd(b));
	}

	@Test
	public void testEOverlapOnSameRowWithNonDifferentRowsBeforeAndAfter() {
		Ship a = new Ship(2, 3, 5, true);
		Ship b = new Ship(2, 4, 5, true);
		Ship c = new Ship(4, 4, 5, true);
		Ship d = new Ship(2, 5, 5, true);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ..........
		// 3 ..aaaaa...
		// 4 ..bb***cc.
		// 5 ..ddddd...
		// 6 ..........
		// 7 ..........
		// 8 ..........
		// 9 ..........
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertTrue(player.isValidShipToAdd(b));
		assertTrue(player.addShip(b));
		assertFalse(player.isValidShipToAdd(c));
		assertTrue(player.isValidShipToAdd(d));
		assertTrue(player.addShip(d));
	}

	@Test
	public void testFOverlapOnSameColumnWithNonDifferentColumnsBeforeAndAfter() {
		Ship a = new Ship(2, 2, 5, false);
		Ship b = new Ship(3, 2, 5, false);
		Ship c = new Ship(3, 4, 5, false);
		Ship d = new Ship(4, 2, 5, false);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ..abd.....
		// 3 ..abd.....
		// 4 ..a*d.....
		// 5 ..a*d.....
		// 6 ..a*d.....
		// 7 ...c......
		// 8 ...c......
		// 9 ..........
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertTrue(player.isValidShipToAdd(b));
		assertTrue(player.addShip(b));
		assertFalse(player.isValidShipToAdd(c));
		assertTrue(player.isValidShipToAdd(d));
		assertTrue(player.addShip(d));
	}

	@Test
	public void testGRowIntersectWithColumn() {
		Ship a = new Ship(2, 3, 5, true);
		Ship b = new Ship(4, 2, 5, false);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ....b.....
		// 3 ..aa*aa...
		// 4 ....b.....
		// 5 ....b.....
		// 6 ....b.....
		// 7 ..........
		// 8 ..........
		// 9 ..........
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertFalse(player.isValidShipToAdd(b));
	}

	@Test
	public void testHRowSpanningColumnWithoutActuallyIntersecting() {
		Ship a = new Ship(2, 3, 5, true);
		Ship b = new Ship(4, 5, 5, false);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ..........
		// 3 ..aaaaa...
		// 4 ..........
		// 5 ....b.....
		// 6 ....b.....
		// 7 ....b.....
		// 8 ....b.....
		// 9 ....b.....
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertTrue(player.isValidShipToAdd(b));
		assertTrue(player.addShip(b));
	}

	@Test
	public void testIColumnSpanningRowWithoutActuallyIntersecting() {
		Ship a = new Ship(2, 3, 5, true);
		Ship b = new Ship(8, 2, 5, false);
		// __0123456789
		// 0 ..........
		// 1 ..........
		// 2 ........b.
		// 3 ..aaaaa.b.
		// 4 ........b.
		// 5 ........b.
		// 6 ........b.
		// 7 ..........
		// 8 ..........
		// 9 ..........
		int boardWidth = 10;
		int boardHeight = 10;
		ArgsProcessor ap = new ArgsProcessor(new String[] {});
		HumanPlayer player = new HumanPlayer("Ron", boardHeight, boardWidth, ap);
		assertTrue(player.isValidShipToAdd(a));
		assertTrue(player.addShip(a));
		assertTrue(player.isValidShipToAdd(b));
		assertTrue(player.addShip(b));
	}
}
